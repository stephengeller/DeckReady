#!/usr/bin/env bash
set -euo pipefail

# -----------------------
# Resolve repo paths (no npm link needed)
# -----------------------
SCRIPT_DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
# Use our ts-node shims by default so the CLI runs TypeScript entrypoints directly
RUN_LUCKY_JS="${RUN_LUCKY_JS:-"$SCRIPT_DIR/run-lucky"}"
SPOTIFY_LIST_JS="${SPOTIFY_LIST_JS:-"$SCRIPT_DIR/spotify-list"}"
QOBUZ_DL_URL_JS="${QOBUZ_DL_URL_JS:-"$SCRIPT_DIR/qobuz-dl-url"}"

# -----------------------
# Config defaults
# -----------------------
OUT_DIR="${OUT_DIR:-$HOME/Music/qobuz-dl}"
QUALITY="${QUALITY:-6}"
DRY_RUN="${DRY_RUN:-0}"
TRACKLIST_FILE=""
DO_CONVERT=0
VERBOSE=0
QUIET=0

usage() {
  cat <<EOF
Usage:
  $(basename "$0") <spotify_url|qobuz_url|tracklist_file> [options]

Options:
  --dir DIR            Output directory for downloads (default: $OUT_DIR)
  --quality Q          5=320, 6=LOSSLESS, 7=24b<=96k, 27=>96k (default: $QUALITY)
  --dry                Dry-run: print qobuz commands; no downloads
  --convert            (placeholder) enable FFmpeg→AIFF conversion
  -h, --help           Show this help

Env overrides:
  RUN_LUCKY_JS=/path/to/runLuckyForTracklist.js
  SPOTIFY_LIST_JS=/path/to/spotify_list.js
  QOBUZ_DL_URL_JS=/path/to/qobuzDl.js
EOF
}

# -----------------------
# Parse args
# -----------------------
if [[ $# -lt 1 ]]; then usage; exit 1; fi
SPOTIFY_URL=""
QOBUZ_URL=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) usage; exit 0 ;;
    --dir) OUT_DIR="$2"; shift 2 ;;
    --quality) QUALITY="$2"; shift 2 ;;
    --dry) DRY_RUN=1; shift ;;
    --convert) DO_CONVERT=1; shift ;;
    --verbose) VERBOSE=1; shift ;;
    --quiet) QUIET=1; shift ;;
    http*spotify.com*) SPOTIFY_URL="$1"; shift ;;
    http*qobuz.com*) QOBUZ_URL="$1"; shift ;;
    *)
      if [[ -z "$TRACKLIST_FILE" && -f "$1" ]]; then
        TRACKLIST_FILE="$1"; shift;
      else
        echo "Unknown arg: $1"; usage; exit 1;
      fi
      ;;
  esac
done

if [[ -z "$SPOTIFY_URL" && -z "$QOBUZ_URL" && -z "$TRACKLIST_FILE" ]]; then
  echo "Provide a Spotify or Qobuz URL, or a tracklist file path."
  usage
  exit 1
fi

# -----------------------
# Checks
# -----------------------
need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1"; exit 1; }; }
need node
need qobuz-dl
[[ -f "$RUN_LUCKY_JS" ]] || { echo "runLucky script not found at: $RUN_LUCKY_JS"; exit 1; }
[[ -f "$QOBUZ_DL_URL_JS" ]] || { echo "qobuzDl script not found at: $QOBUZ_DL_URL_JS"; exit 1; }
if [[ -z "$TRACKLIST_FILE" && -n "$SPOTIFY_URL" ]]; then
  [[ -f "$SPOTIFY_LIST_JS" ]] || { echo "spotify_list.js not found at: $SPOTIFY_LIST_JS"; exit 1; }
fi

mkdir -p "$OUT_DIR"

# -----------------------
# Temp workspace
# -----------------------
TMP_ROOT="$(mktemp -d -t s2r.XXXXXX)"
trap 'rm -rf "$TMP_ROOT"' EXIT

if [[ -n "$QOBUZ_URL" ]]; then
  echo "Downloading from Qobuz URL via qobuz-dl dl..."
  ARGS=("$QOBUZ_DL_URL_JS" "$QOBUZ_URL" --dir "$OUT_DIR")
  [[ "$DRY_RUN" -eq 1 ]] && ARGS+=(--dry)
  [[ "$VERBOSE" -eq 1 ]] && ARGS+=(--verbose)
  [[ "$QUIET" -eq 1 ]] && ARGS+=(--quiet)
  QUALITY="$QUALITY" "${ARGS[@]}"
  echo "Done."
  exit 0
fi

TRACKS_TXT="$TRACKLIST_FILE"
if [[ -z "$TRACKLIST_FILE" ]]; then
  TRACKS_TXT="$TMP_ROOT/tracklist.txt"
  echo "Scraping Spotify → tracklist..."
  "$SPOTIFY_LIST_JS" "$SPOTIFY_URL" > "$TRACKS_TXT"
fi

LINES=$(grep -c ' - ' "$TRACKS_TXT" || true)
if [[ "${LINES:-0}" -eq 0 ]]; then
  echo "No valid 'Song - Artist' lines found in $TRACKS_TXT"
  exit 1
fi
echo "Found $LINES tracks."

# -----------------------
# Step 2: run qobuz-dl lucky via local JS
# -----------------------
echo "Starting qobuz downloads…"
ARGS=("$RUN_LUCKY_JS" "$TRACKS_TXT" --dir "$OUT_DIR" --quality "$QUALITY")
[[ "$DRY_RUN" -eq 1 ]] && ARGS+=(--dry)
[[ "$VERBOSE" -eq 1 ]] && ARGS+=(--verbose)
[[ "$QUIET" -eq 1 ]] && ARGS+=(--quiet)
"${ARGS[@]}"

# -----------------------
# Step 4 (optional placeholder): FFmpeg → AIFF
# -----------------------
if [[ "$DO_CONVERT" -eq 1 ]]; then
  need ffmpeg
  echo "Converting to AIFF (placeholder) ..."
  while IFS= read -r -d '' f; do
    base="${f%.*}"
    aiff="${base}.aiff"
    ffmpeg -y -i "$f" -map_metadata 0 -c:a pcm_s16be "$aiff"
  done < <(find "$OUT_DIR" -type f \( -iname '*.flac' -o -iname '*.wav' -o -iname '*.mp3' -o -iname '*.m4a' \) -print0)
fi

echo "Done."
